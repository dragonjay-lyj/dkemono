---
const { artist } = Astro.props;
const { name, avatar, cover, service, bio } = artist;
---

<a
  href={`/artists/${name.toLowerCase().replace(/\s+/g, '-')}`}
  class="relative block bg-gray-900 rounded-xl overflow-hidden shadow-lg h-72 w-full transition-all duration-500 hover:shadow-2xl hover:-translate-y-2 artist-card group"
  aria-label={`查看 ${name} 的画师页面`}
  data-artist-name={name}
>
  <!-- 封面图片，带灰色阴影遮罩和渐变效果 -->
  <div class="relative w-full h-full">
    <img
      src={cover}
      alt={`${name} 的封面`}
      class="object-cover w-full h-full opacity-70 transition-opacity duration-700 group-hover:opacity-50"
      loading="lazy"
      decoding="async"
      width="800"
      height="600"
      sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
      srcset={`${cover}?w=400 400w, ${cover}?w=800 800w, ${cover}?w=1200 1200w`}
    />
    <!-- 渐变遮罩 -->
    <div class="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent opacity-70"></div>
  </div>

  <!-- 内容区域 -->
  <div class="absolute bottom-0 left-0 w-full p-4 md:p-6 flex flex-col sm:flex-row items-start sm:items-center justify-between">
    <!-- 画师头像和信息 -->
    <div class="flex flex-col sm:flex-row items-start sm:items-center">
      <!-- 画师头像，点击显示简介 -->
      <button
        class="artist-avatar-btn w-12 h-12 md:w-16 md:h-16 rounded-full border-3 border-white/80 object-cover overflow-hidden shadow-md transition-transform duration-300 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 focus:ring-offset-gray-900"
        aria-label={`查看 ${name} 的简介`}
        data-artist-name={name}
      >
        <img
          src={avatar}
          alt={`${name} 的头像`}
          class="w-full h-full rounded-full transition-opacity duration-300 group-hover:opacity-90"
          loading="lazy"
          decoding="async"
          width="64"
          height="64"
        />
      </button>
      <!-- 画师信息 -->
      <div class="mt-3 sm:mt-0 sm:ml-4 text-left">
        <p class="flex items-center text-white/90 text-sm md:text-base font-medium">
          <!-- 服务来源图标 -->
          <span class="mr-2 inline-block w-4 h-4 md:w-5 md:h-5 text-blue-300" aria-hidden="true">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <circle cx="12" cy="12" r="10" />
            </svg>
          </span>
          {service}
        </p>
        <h3 class="text-white text-lg md:text-xl font-bold tracking-tight transition-colors duration-300 group-hover:text-blue-300">
          {name}
        </h3>
      </div>
    </div>
    <!-- 查看详情按钮（仅在悬停时显示） -->
    <span class="mt-3 sm:mt-0 text-white text-sm font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300">
      查看详情 →
    </span>
  </div>
</a>

<!-- 简介模态框 (静态结构，动态显示通过 JS 控制) -->
<div
  class="artist-modal hidden fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 transition-opacity duration-300"
  data-artist-name={name}
  aria-hidden="true"
>
  <div
    class="bg-gray-900 rounded-2xl p-6 w-11/12 md:w-1/2 max-h-[80vh] overflow-y-auto shadow-2xl border border-gray-700/50 relative transform transition-transform duration-300 scale-95"
    role="dialog"
    aria-labelledby={`modal-title-${name}`}
  >
    <button
      class="close-modal-btn absolute top-3 right-3 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900 transition-colors duration-200"
      aria-label="关闭简介"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2.5"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    <h2 id={`modal-title-${name}`} class="text-2xl md:text-3xl font-bold mb-4 text-white tracking-wide">
      {name} 的简介
    </h2>
    <div class="text-gray-300 text-base leading-relaxed">
      <!-- 简介内容从 MDX 文件获取，假设 artist 对象包含简介字段 -->
      <p>{bio || '暂无简介信息。'}</p>
    </div>
  </div>
</div>

<script>
  // 客户端脚本：实现头像点击显示简介模态框
  document.querySelectorAll('.artist-avatar-btn').forEach((btn) => {
    btn.addEventListener('click', function (event) {
      event.preventDefault(); // 阻止卡片链接导航
      const artistName = this.getAttribute('data-artist-name');
      const modal = document.querySelector(`.artist-modal[data-artist-name="${artistName}"]`);
      if (modal) {
        modal.classList.remove('hidden');
        modal.setAttribute('aria-hidden', 'false');
        // 触发模态框动画
        const modalContent = modal.querySelector('div');
        if (modalContent) {
          modalContent.style.transform = 'scale(1)';
        }
      }
    });
  });

  // 关闭模态框
  document.querySelectorAll('.close-modal-btn').forEach((btn) => {
    btn.addEventListener('click', function () {
      const modal = this.closest('.artist-modal');
      if (modal) {
        modal.classList.add('hidden');
        modal.setAttribute('aria-hidden', 'true');
        // 重置模态框动画
        const modalContent = modal.querySelector('div');
        if (modalContent) {
          modalContent.style.transform = 'scale(0.95)';
        }
      }
    });
  });

  // 点击模态框外部关闭
  document.querySelectorAll('.artist-modal').forEach((modal) => {
    modal.addEventListener('click', function (event) {
      if (event.target === this) {
        this.classList.add('hidden');
        this.setAttribute('aria-hidden', 'true');
        // 重置模态框动画
        const modalContent = this.querySelector('div');
        if (modalContent) {
          modalContent.style.transform = 'scale(0.95)';
        }
      }
    });
  });

  // 按 Esc 键关闭模态框
  document.addEventListener('keydown', function (event) {
    if (event.key === 'Escape') {
      const modals = document.querySelectorAll('.artist-modal:not(.hidden)');
      modals.forEach((modal) => {
        modal.classList.add('hidden');
        modal.setAttribute('aria-hidden', 'true');
        // 重置模态框动画
        const modalContent = modal.querySelector('div');
        if (modalContent) {
          modalContent.style.transform = 'scale(0.95)';
        }
      });
    }
  });
</script>

<style>
  /* 模态框样式调整 */
  .artist-modal:not(.hidden) {
    display: flex !important;
    opacity: 1;
  }
  .artist-modal.hidden {
    opacity: 0;
  }
  /* 模态框内容动画 */
  .artist-modal div[role="dialog"] {
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    opacity: 1;
  }
  .artist-modal.hidden div[role="dialog"] {
    opacity: 0;
  }
</style>