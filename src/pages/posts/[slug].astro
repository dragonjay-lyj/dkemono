---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import PostNavigation from '../../components/post/PostNavigation.astro';
import ArtistCardPost from '../../components/artist/ArtistCardPost.astro';
import Footer from '../../components/common/Footer.astro';
import TwikooComment from '../../components/common/TwikooComment.tsx';

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  return posts.map((post, index) => {
    const prev = index > 0 ? posts[index - 1] : null;
    const next = index < posts.length - 1 ? posts[index + 1] : null;
    return {
      params: { slug: post.slug },
      props: {
        post,
        prev: prev ? { slug: `/posts/${prev.slug}` } : null,
        next: next ? { slug: `/posts/${next.slug}` } : null,
      },
    };
  });
}

const { post, prev, next } = Astro.props;
const artists = await getCollection('artists', ({ data }) => data.name === post.data.artist);
const artist = artists[0]?.data;

// 从 URL 参数获取当前页（用于内容分页）
const url = new URL(Astro.request.url);
const currentContentPage = parseInt(url.searchParams.get('contentPage') || '1', 10);

// 假设内容被拆分为多页（这里为简化示例，实际需预处理 MDX 内容）
const itemsPerPage = 1000; // 假设每页显示 1000 个字符
const contentText = post.body || ''; // 获取 MDX 内容文本（简化处理，实际需更复杂逻辑）
const totalContentPages = Math.ceil(contentText.length / itemsPerPage) || 1;
const validatedContentPage = Math.max(1, Math.min(currentContentPage, totalContentPages));

// 获取当前页的内容子集（简化示例，实际需处理 MDX 渲染）
const startIndex = (validatedContentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const currentContent = contentText.slice(startIndex, endIndex);
const { Content } = await post.render();
export const prerender = true;
---

<MainLayout title={post.data.title} description={`阅读 ${post.data.title}，作者：${post.data.artist}`}>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8 md:py-10 transition-all duration-300">
    <!-- 导航 -->
    <div class="mb-6 sm:mb-8 md:mb-10 animate-fade-in">
      <PostNavigation prev={prev} next={next} />
    </div>
    <!-- 画师和帖子卡片 -->
    {artist && (
      <div class="mb-6 sm:mb-8 md:mb-10 animate-fade-in-up animation-delay-200">
        <ArtistCardPost artist={artist} post={post.data} />
      </div>
    )}
    <!-- 内容和目录 -->
    <div class="flex flex-col lg:flex-row gap-6 sm:gap-8 md:gap-10 my-6 sm:my-8 md:my-10 animate-fade-in-up animation-delay-400">
      <!-- 内容目录导航（右侧或顶部） -->
      <aside class="lg:w-1/4 bg-gray-100 dark:bg-gray-800 p-4 sm:p-5 rounded-xl shadow-md order-2 lg:order-1 lg:sticky lg:top-6 transition-all duration-300 border border-gray-200 dark:border-gray-700">
        <h2 class="text-lg sm:text-xl font-bold mb-2 md:mb-3 text-gray-800 dark:text-white transition-colors duration-300">目录</h2>
        <nav id="toc" class="text-sm md:text-base overflow-y-auto max-h-[60vh] transition-all duration-300">
          <!-- 目录内容由 JS 动态生成 -->
          <p class="text-gray-500 dark:text-gray-400 animate-pulse">加载目录中...</p>
        </nav>
      </aside>
      <!-- 内容区域 -->
      <article class="lg:w-3/4 bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-xl shadow-md order-1 lg:order-2 transition-all duration-300 border border-gray-200 dark:border-gray-700">
        <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold mb-3 sm:mb-4 md:mb-6 text-gray-800 dark:text-white transition-colors duration-300">{post.data.title}</h1>
        <div class="flex flex-col sm:flex-row gap-3 sm:gap-4 mb-5 sm:mb-6 md:mb-8">
          <p class="text-gray-600 dark:text-gray-400 text-sm sm:text-base transition-colors duration-300">
            发布时间: {post.data.publishDate.toLocaleDateString()}
          </p>
          {
            post.data.tags && post.data.tags.length > 0 && (
              <div class="flex flex-wrap gap-1.5 sm:gap-2">
                {post.data.tags.map((tag) => (
                  <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300 text-xs sm:text-sm px-2 sm:px-3 py-0.5 sm:py-1 rounded-full transition-all duration-300 hover:bg-blue-200 dark:hover:bg-blue-800 hover:scale-105">
                    {tag}
                  </span>
                ))}
              </div>
            )
          }
        </div>
        <div class="prose prose-lg prose-gray dark:prose-invert max-w-none leading-relaxed text-gray-800 dark:text-gray-200 transition-colors duration-300">
          <!-- 富文本内容，支持 MDX -->
          <Content />
          <!-- 如果实现分页，这里显示当前页内容 -->
          <!-- <div dangerouslySetInnerHTML={{ __html: currentContent }} /> -->
        </div>
      </article>
    </div>
    <!-- 评论板块 -->
    <div class="mt-6 sm:mt-8 md:mt-10 p-4 sm:p-6 bg-gray-100 dark:bg-gray-800 rounded-xl shadow-md border border-gray-200 dark:border-gray-700 transition-all duration-300 animate-fade-in-up animation-delay-600">
      <TwikooComment
        client:load
        envId="https://superlative-valkyrie-233b02.netlify.app/.netlify/functions/twikoo"
        region="ap-shanghai"
        path={Astro.url.pathname}
        lang="zh-CN"
      />
    </div>
    <!-- 返回顶部按钮 -->
    <button
      id="back-to-top"
      class="fixed bottom-4 sm:bottom-6 right-4 sm:right-6 bg-blue-600 text-white w-10 h-10 sm:w-12 sm:h-12 rounded-full shadow-lg hover:bg-blue-700 hover:shadow-xl transition-all duration-300 transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 hidden z-50"
      aria-label="返回顶部"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2.5"
        stroke-linecap="round"
        stroke-linejoin="round"
        aria-hidden="true"
        class="mx-auto transition-transform duration-300 group-hover:-translate-y-1"
      >
        <path d="M12 19V5M5 12l7-7 7 7" />
      </svg>
    </button>
  </div>
  <Footer />
</MainLayout>

<!-- 客户端脚本：实现返回顶部按钮和内容目录导航 -->
<script>
  // 显示/隐藏返回顶部按钮
  const backToTopButton = document.getElementById('back-to-top');
  if (backToTopButton) {
    window.addEventListener('scroll', () => {
      if (window.scrollY > 300) {
        backToTopButton.classList.remove('hidden');
        backToTopButton.classList.add('animate-fade-in-up');
      } else {
        backToTopButton.classList.add('hidden');
        backToTopButton.classList.remove('animate-fade-in-up');
      }
    });

    backToTopButton.addEventListener('click', () => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  }

  // 动态生成内容目录导航
  const tocContainer = document.getElementById('toc');
  if (tocContainer) {
    const headings = document.querySelectorAll('.prose h2, .prose h3');
    if (headings.length > 0) {
      tocContainer.innerHTML = ''; // 清空占位符
      const ul = document.createElement('ul');
      ul.classList.add('space-y-2', 'sm:space-y-3');

      headings.forEach((heading, index) => {
        const id = heading.id || `heading-${index}`;
        heading.id = id; // 确保每个标题有唯一 ID
        const li = document.createElement('li');
        const a = document.createElement('a');
        a.href = `#${id}`;
        a.textContent = heading.textContent;
        a.classList.add('text-gray-700', 'dark:text-gray-300', 'hover:text-blue-600', 'dark:hover:text-blue-400', 'transition-colors', 'duration-200', 'line-clamp-1');
        if (heading.tagName === 'H3') {
          li.classList.add('ml-3', 'sm:ml-4'); // 缩进 h3
        }
        a.addEventListener('click', (e) => {
          e.preventDefault();
          document.getElementById(id)?.scrollIntoView({ behavior: 'smooth' });
        });
        li.appendChild(a);
        ul.appendChild(li);
      });

      tocContainer.appendChild(ul);
    } else {
      tocContainer.innerHTML = '<p class="text-gray-500 dark:text-gray-400 text-sm sm:text-base animate-pulse">无目录内容。</p>';
    }
  }
</script>

<style>
  /* 确保 prose 样式适用于富文本内容 */
  .prose img {
    max-width: 100%;
    height: auto;
    border-radius: 0.75rem;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  .prose img:hover {
    transform: scale(1.02);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }
  .prose a {
    color: #2563eb;
    text-decoration: underline;
    transition: color 0.2s ease, transform 0.2s ease;
  }
  .prose a:hover {
    color: #1e40af;
    transform: translateX(2px);
  }
  .dark .prose a {
    color: #60a5fa;
  }
  .dark .prose a:hover {
    color: #3b82f6;
  }
  /* 内容目录导航样式 */
  #toc ul {
    list-style: none;
    padding-left: 0;
  }
  #toc li {
    border-left: 2px solid #e5e7eb;
    padding-left: 0.75rem;
    transition: border-color 0.3s ease;
  }
  .dark #toc li {
    border-left-color: #374151;
  }
  #toc li:hover {
    border-left-color: #2563eb;
  }
  .dark #toc li:hover {
    border-left-color: #60a5fa;
  }
  /* 自定义动画样式 */
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(1rem);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .animate-fade-in {
    animation: fade-in 0.6s ease-out forwards;
  }
  .animate-fade-in-up {
    animation: fade-in-up 0.6s ease-out forwards;
  }
  .animation-delay-200 {
    animation-delay: 0.2s;
  }
  .animation-delay-400 {
    animation-delay: 0.4s;
  }
  .animation-delay-600 {
    animation-delay: 0.6s;
  }
</style>